QUESTION:56
56. Merge Intervals
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Example 3:
Input: intervals = [[4,7],[1,4]]
Output: [[1,7]]
Explanation: Intervals [1,4] and [4,7] are considered overlapping.

SOLUTION:
class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals,(a, b) -> Integer.compare(a[0], b[0]));
        List<int[]> merge_i = new ArrayList<>();
        int[] curr_int = intervals[0];
        
        for(int i = 1; i< intervals.length; i++){
            int[] next_int = intervals[i];
            if(next_int[0] <= curr_int[1]){
                curr_int[1] = Math.max(next_int[1], curr_int[1]);
            }else{
                merge_i.add(curr_int);
                curr_int = next_int;
            }
        }
        merge_i.add(curr_int);
        return merge_i.toArray(new int[merge_i.size()][]);
    }
}
